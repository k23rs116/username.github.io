<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>掲示板</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }
        .post {
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }
        /* スマホ用のスタイル */
        @media (max-width: 600px) {
            body {
                margin: 10px;
            }
            .post {
                padding: 5px;
            }
        }
    </style>
</head>
<body>
    <h1>掲示板</h1>
    <form id="postForm">
        <textarea id="postContent" rows="4" cols="50" placeholder="ここに投稿を入力してください"></textarea><br>
        <button type="submit">投稿</button>
    </form>
    <div id="posts"></div>

    <script>
        // ローカルストレージから投稿を読み込む
        function loadPosts() {
            const posts = JSON.parse(localStorage.getItem('posts')) || [];
            posts.forEach(content => {
                const post = document.createElement('div');
                post.className = 'post';
                post.textContent = content;
                document.getElementById('posts').appendChild(post);
            });
        }

        // 投稿を保存する
        function savePost(content) {
            const posts = JSON.parse(localStorage.getItem('posts')) || [];
            posts.push(content);
            localStorage.setItem('posts', JSON.stringify(posts));
        }

        document.getElementById('postForm').addEventListener('submit', function(event) {
            event.preventDefault();
            const content = document.getElementById('postContent').value;
            if (content.trim() !== "") {
                const post = document.createElement('div');
                post.className = 'post';
                post.textContent = content;
                document.getElementById('posts').appendChild(post);
                savePost(content);
                document.getElementById('postContent').value = '';
            }
        });

        // ページ読み込み時に投稿を表示
        window.onload = loadPosts;
    </script>
<!-- Code injected by live-server -->
<script>
	// <![CDATA[  <-- For SVG support
	if ('WebSocket' in window) {
		(function () {
			function refreshCSS() {
				var sheets = [].slice.call(document.getElementsByTagName("link"));
				var head = document.getElementsByTagName("head")[0];
				for (var i = 0; i < sheets.length; ++i) {
					var elem = sheets[i];
					var parent = elem.parentElement || head;
					parent.removeChild(elem);
					var rel = elem.rel;
					if (elem.href && typeof rel != "string" || rel.length == 0 || rel.toLowerCase() == "stylesheet") {
						var url = elem.href.replace(/(&|\?)_cacheOverride=\d+/, '');
						elem.href = url + (url.indexOf('?') >= 0 ? '&' : '?') + '_cacheOverride=' + (new Date().valueOf());
					}
					parent.appendChild(elem);
				}
			}
			var protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
			var address = protocol + window.location.host + window.location.pathname + '/ws';
			var socket = new WebSocket(address);
			socket.onmessage = function (msg) {
				if (msg.data == 'reload') window.location.reload();
				else if (msg.data == 'refreshcss') refreshCSS();
			};
			if (sessionStorage && !sessionStorage.getItem('IsThisFirstTime_Log_From_LiveServer')) {
				console.log('Live reload enabled.');
				sessionStorage.setItem('IsThisFirstTime_Log_From_LiveServer', true);
			}
		})();
	}
	else {
		console.error('Upgrade your browser. This Browser is NOT supported WebSocket for Live-Reloading.');
	}
	// ]]>
</script>
</body>
</html>